/* Auto-generated by genmsg_cpp for file /home/pranay/Desktop/buoy_detect/msg/center_color.msg */
#ifndef BUOY_DETECT_MESSAGE_CENTER_COLOR_H
#define BUOY_DETECT_MESSAGE_CENTER_COLOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace buoy_detect
{
template <class ContainerAllocator>
struct center_color_ {
  typedef center_color_<ContainerAllocator> Type;

  center_color_()
  : yellow(false)
  , red(false)
  , green(false)
  , Y_x(0)
  , Y_y(0)
  , R_x(0)
  , R_y(0)
  , G_x(0)
  , G_y(0)
  , Y_radius(0)
  , R_radius(0)
  , G_radius(0)
  {
  }

  center_color_(const ContainerAllocator& _alloc)
  : yellow(false)
  , red(false)
  , green(false)
  , Y_x(0)
  , Y_y(0)
  , R_x(0)
  , R_y(0)
  , G_x(0)
  , G_y(0)
  , Y_radius(0)
  , R_radius(0)
  , G_radius(0)
  {
  }

  typedef uint8_t _yellow_type;
  uint8_t yellow;

  typedef uint8_t _red_type;
  uint8_t red;

  typedef uint8_t _green_type;
  uint8_t green;

  typedef int64_t _Y_x_type;
  int64_t Y_x;

  typedef int64_t _Y_y_type;
  int64_t Y_y;

  typedef int64_t _R_x_type;
  int64_t R_x;

  typedef int64_t _R_y_type;
  int64_t R_y;

  typedef int64_t _G_x_type;
  int64_t G_x;

  typedef int64_t _G_y_type;
  int64_t G_y;

  typedef int64_t _Y_radius_type;
  int64_t Y_radius;

  typedef int64_t _R_radius_type;
  int64_t R_radius;

  typedef int64_t _G_radius_type;
  int64_t G_radius;


  typedef boost::shared_ptr< ::buoy_detect::center_color_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::buoy_detect::center_color_<ContainerAllocator>  const> ConstPtr;
}; // struct center_color
typedef  ::buoy_detect::center_color_<std::allocator<void> > center_color;

typedef boost::shared_ptr< ::buoy_detect::center_color> center_colorPtr;
typedef boost::shared_ptr< ::buoy_detect::center_color const> center_colorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::buoy_detect::center_color_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::buoy_detect::center_color_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace buoy_detect

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::buoy_detect::center_color_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::buoy_detect::center_color_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::buoy_detect::center_color_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5f4ca0d84246faebe88f23145abe77fd";
  }

  static const char* value(const  ::buoy_detect::center_color_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5f4ca0d84246faebULL;
  static const uint64_t static_value2 = 0xe88f23145abe77fdULL;
};

template<class ContainerAllocator>
struct DataType< ::buoy_detect::center_color_<ContainerAllocator> > {
  static const char* value() 
  {
    return "buoy_detect/center_color";
  }

  static const char* value(const  ::buoy_detect::center_color_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::buoy_detect::center_color_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool yellow\n\
bool red\n\
bool green\n\
\n\
int64 Y_x\n\
int64 Y_y\n\
int64 R_x\n\
int64 R_y\n\
int64 G_x\n\
int64 G_y\n\
\n\
int64 Y_radius\n\
int64 R_radius\n\
int64 G_radius\n\
\n\
";
  }

  static const char* value(const  ::buoy_detect::center_color_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::buoy_detect::center_color_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::buoy_detect::center_color_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.yellow);
    stream.next(m.red);
    stream.next(m.green);
    stream.next(m.Y_x);
    stream.next(m.Y_y);
    stream.next(m.R_x);
    stream.next(m.R_y);
    stream.next(m.G_x);
    stream.next(m.G_y);
    stream.next(m.Y_radius);
    stream.next(m.R_radius);
    stream.next(m.G_radius);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct center_color_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::buoy_detect::center_color_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::buoy_detect::center_color_<ContainerAllocator> & v) 
  {
    s << indent << "yellow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yellow);
    s << indent << "red: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.red);
    s << indent << "green: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.green);
    s << indent << "Y_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Y_x);
    s << indent << "Y_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Y_y);
    s << indent << "R_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.R_x);
    s << indent << "R_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.R_y);
    s << indent << "G_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.G_x);
    s << indent << "G_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.G_y);
    s << indent << "Y_radius: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Y_radius);
    s << indent << "R_radius: ";
    Printer<int64_t>::stream(s, indent + "  ", v.R_radius);
    s << indent << "G_radius: ";
    Printer<int64_t>::stream(s, indent + "  ", v.G_radius);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BUOY_DETECT_MESSAGE_CENTER_COLOR_H

