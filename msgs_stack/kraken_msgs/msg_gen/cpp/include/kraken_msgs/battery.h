/* Auto-generated by genmsg_cpp for file /home/dyutimoy/kinetic_workspace/kraken_3.0-indigo-devel/msgs_stack/kraken_msgs/msg/battery.msg */
#ifndef KRAKEN_MSGS_MESSAGE_BATTERY_H
#define KRAKEN_MSGS_MESSAGE_BATTERY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace kraken_msgs
{
template <class ContainerAllocator>
struct battery_ {
  typedef battery_<ContainerAllocator> Type;

  battery_()
  : header()
  , cell1(0.0)
  , cell2(0.0)
  , cell3(0.0)
  , cell4(0.0)
  , cell5(0.0)
  , cell6(0.0)
  , vcc(0.0)
  , current(0.0)
  , energy_consumed(0.0)
  , percent_left(0.0)
  {
  }

  battery_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , cell1(0.0)
  , cell2(0.0)
  , cell3(0.0)
  , cell4(0.0)
  , cell5(0.0)
  , cell6(0.0)
  , vcc(0.0)
  , current(0.0)
  , energy_consumed(0.0)
  , percent_left(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _cell1_type;
  float cell1;

  typedef float _cell2_type;
  float cell2;

  typedef float _cell3_type;
  float cell3;

  typedef float _cell4_type;
  float cell4;

  typedef float _cell5_type;
  float cell5;

  typedef float _cell6_type;
  float cell6;

  typedef float _vcc_type;
  float vcc;

  typedef float _current_type;
  float current;

  typedef float _energy_consumed_type;
  float energy_consumed;

  typedef float _percent_left_type;
  float percent_left;


  typedef boost::shared_ptr< ::kraken_msgs::battery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kraken_msgs::battery_<ContainerAllocator>  const> ConstPtr;
}; // struct battery
typedef  ::kraken_msgs::battery_<std::allocator<void> > battery;

typedef boost::shared_ptr< ::kraken_msgs::battery> batteryPtr;
typedef boost::shared_ptr< ::kraken_msgs::battery const> batteryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kraken_msgs::battery_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kraken_msgs::battery_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kraken_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kraken_msgs::battery_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kraken_msgs::battery_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kraken_msgs::battery_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d535a09473d27f72b71883685e5447bb";
  }

  static const char* value(const  ::kraken_msgs::battery_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd535a09473d27f72ULL;
  static const uint64_t static_value2 = 0xb71883685e5447bbULL;
};

template<class ContainerAllocator>
struct DataType< ::kraken_msgs::battery_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kraken_msgs/battery";
  }

  static const char* value(const  ::kraken_msgs::battery_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kraken_msgs::battery_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32 cell1\n\
float32 cell2\n\
float32 cell3\n\
float32 cell4\n\
float32 cell5\n\
float32 cell6\n\
float32 vcc\n\
float32 current\n\
float32 energy_consumed\n\
float32 percent_left\n\
 \n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::kraken_msgs::battery_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::kraken_msgs::battery_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::kraken_msgs::battery_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kraken_msgs::battery_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.cell1);
    stream.next(m.cell2);
    stream.next(m.cell3);
    stream.next(m.cell4);
    stream.next(m.cell5);
    stream.next(m.cell6);
    stream.next(m.vcc);
    stream.next(m.current);
    stream.next(m.energy_consumed);
    stream.next(m.percent_left);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct battery_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kraken_msgs::battery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kraken_msgs::battery_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cell1: ";
    Printer<float>::stream(s, indent + "  ", v.cell1);
    s << indent << "cell2: ";
    Printer<float>::stream(s, indent + "  ", v.cell2);
    s << indent << "cell3: ";
    Printer<float>::stream(s, indent + "  ", v.cell3);
    s << indent << "cell4: ";
    Printer<float>::stream(s, indent + "  ", v.cell4);
    s << indent << "cell5: ";
    Printer<float>::stream(s, indent + "  ", v.cell5);
    s << indent << "cell6: ";
    Printer<float>::stream(s, indent + "  ", v.cell6);
    s << indent << "vcc: ";
    Printer<float>::stream(s, indent + "  ", v.vcc);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "energy_consumed: ";
    Printer<float>::stream(s, indent + "  ", v.energy_consumed);
    s << indent << "percent_left: ";
    Printer<float>::stream(s, indent + "  ", v.percent_left);
  }
};


} // namespace message_operations
} // namespace ros

#endif // KRAKEN_MSGS_MESSAGE_BATTERY_H

