/* Auto-generated by genmsg_cpp for file /home/dyutimoy/kinetic_workspace/kraken_3.0-indigo-devel/msgs_stack/kraken_msgs/msg/stateData.msg */
#ifndef KRAKEN_MSGS_MESSAGE_STATEDATA_H
#define KRAKEN_MSGS_MESSAGE_STATEDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace kraken_msgs
{
template <class ContainerAllocator>
struct stateData_ {
  typedef stateData_<ContainerAllocator> Type;

  stateData_()
  : header()
  , x_coordinate(0.0)
  , y_coordinate(0.0)
  , velocity_x(0.0)
  , velocity_y(0.0)
  {
  }

  stateData_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , x_coordinate(0.0)
  , y_coordinate(0.0)
  , velocity_x(0.0)
  , velocity_y(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _x_coordinate_type;
  float x_coordinate;

  typedef float _y_coordinate_type;
  float y_coordinate;

  typedef float _velocity_x_type;
  float velocity_x;

  typedef float _velocity_y_type;
  float velocity_y;


  typedef boost::shared_ptr< ::kraken_msgs::stateData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kraken_msgs::stateData_<ContainerAllocator>  const> ConstPtr;
}; // struct stateData
typedef  ::kraken_msgs::stateData_<std::allocator<void> > stateData;

typedef boost::shared_ptr< ::kraken_msgs::stateData> stateDataPtr;
typedef boost::shared_ptr< ::kraken_msgs::stateData const> stateDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kraken_msgs::stateData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kraken_msgs::stateData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kraken_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kraken_msgs::stateData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kraken_msgs::stateData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kraken_msgs::stateData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "da974ca0ffb561ef9eab391c52edbc4e";
  }

  static const char* value(const  ::kraken_msgs::stateData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xda974ca0ffb561efULL;
  static const uint64_t static_value2 = 0x9eab391c52edbc4eULL;
};

template<class ContainerAllocator>
struct DataType< ::kraken_msgs::stateData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kraken_msgs/stateData";
  }

  static const char* value(const  ::kraken_msgs::stateData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kraken_msgs::stateData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32 x_coordinate\n\
float32 y_coordinate\n\
float32 velocity_x\n\
float32 velocity_y\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::kraken_msgs::stateData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::kraken_msgs::stateData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::kraken_msgs::stateData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kraken_msgs::stateData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.x_coordinate);
    stream.next(m.y_coordinate);
    stream.next(m.velocity_x);
    stream.next(m.velocity_y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct stateData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kraken_msgs::stateData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kraken_msgs::stateData_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x_coordinate: ";
    Printer<float>::stream(s, indent + "  ", v.x_coordinate);
    s << indent << "y_coordinate: ";
    Printer<float>::stream(s, indent + "  ", v.y_coordinate);
    s << indent << "velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_x);
    s << indent << "velocity_y: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_y);
  }
};


} // namespace message_operations
} // namespace ros

#endif // KRAKEN_MSGS_MESSAGE_STATEDATA_H

