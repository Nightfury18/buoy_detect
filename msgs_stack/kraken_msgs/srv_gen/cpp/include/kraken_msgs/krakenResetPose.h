/* Auto-generated by genmsg_cpp for file /home/dyutimoy/kinetic_workspace/kraken_3.0-indigo-devel/msgs_stack/kraken_msgs/srv/krakenResetPose.srv */
#ifndef KRAKEN_MSGS_SERVICE_KRAKENRESETPOSE_H
#define KRAKEN_MSGS_SERVICE_KRAKENRESETPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "kraken_msgs/krakenPose.h"



namespace kraken_msgs
{
template <class ContainerAllocator>
struct krakenResetPoseRequest_ {
  typedef krakenResetPoseRequest_<ContainerAllocator> Type;

  krakenResetPoseRequest_()
  : pose()
  {
  }

  krakenResetPoseRequest_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef  ::kraken_msgs::krakenPose_<ContainerAllocator>  _pose_type;
   ::kraken_msgs::krakenPose_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct krakenResetPoseRequest
typedef  ::kraken_msgs::krakenResetPoseRequest_<std::allocator<void> > krakenResetPoseRequest;

typedef boost::shared_ptr< ::kraken_msgs::krakenResetPoseRequest> krakenResetPoseRequestPtr;
typedef boost::shared_ptr< ::kraken_msgs::krakenResetPoseRequest const> krakenResetPoseRequestConstPtr;



template <class ContainerAllocator>
struct krakenResetPoseResponse_ {
  typedef krakenResetPoseResponse_<ContainerAllocator> Type;

  krakenResetPoseResponse_()
  : check(false)
  {
  }

  krakenResetPoseResponse_(const ContainerAllocator& _alloc)
  : check(false)
  {
  }

  typedef uint8_t _check_type;
  uint8_t check;


  typedef boost::shared_ptr< ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct krakenResetPoseResponse
typedef  ::kraken_msgs::krakenResetPoseResponse_<std::allocator<void> > krakenResetPoseResponse;

typedef boost::shared_ptr< ::kraken_msgs::krakenResetPoseResponse> krakenResetPoseResponsePtr;
typedef boost::shared_ptr< ::kraken_msgs::krakenResetPoseResponse const> krakenResetPoseResponseConstPtr;


struct krakenResetPose
{

typedef krakenResetPoseRequest Request;
typedef krakenResetPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct krakenResetPose
} // namespace kraken_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e40321100af798b10d5433dca7c101ca";
  }

  static const char* value(const  ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe40321100af798b1ULL;
  static const uint64_t static_value2 = 0x0d5433dca7c101caULL;
};

template<class ContainerAllocator>
struct DataType< ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kraken_msgs/krakenResetPoseRequest";
  }

  static const char* value(const  ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "krakenPose pose\n\
\n\
================================================================================\n\
MSG: kraken_msgs/krakenPose\n\
Header header\n\
float32[15] data\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c5df00fea9d1f39520fa0345cbde1b26";
  }

  static const char* value(const  ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc5df00fea9d1f395ULL;
  static const uint64_t static_value2 = 0x20fa0345cbde1b26ULL;
};

template<class ContainerAllocator>
struct DataType< ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kraken_msgs/krakenResetPoseResponse";
  }

  static const char* value(const  ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool check\n\
\n\
\n\
";
  }

  static const char* value(const  ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct krakenResetPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.check);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct krakenResetPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<kraken_msgs::krakenResetPose> {
  static const char* value() 
  {
    return "5ad83e5d3eeb79d5efc751e157bf87aa";
  }

  static const char* value(const kraken_msgs::krakenResetPose&) { return value(); } 
};

template<>
struct DataType<kraken_msgs::krakenResetPose> {
  static const char* value() 
  {
    return "kraken_msgs/krakenResetPose";
  }

  static const char* value(const kraken_msgs::krakenResetPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5ad83e5d3eeb79d5efc751e157bf87aa";
  }

  static const char* value(const kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kraken_msgs/krakenResetPose";
  }

  static const char* value(const kraken_msgs::krakenResetPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5ad83e5d3eeb79d5efc751e157bf87aa";
  }

  static const char* value(const kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kraken_msgs/krakenResetPose";
  }

  static const char* value(const kraken_msgs::krakenResetPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // KRAKEN_MSGS_SERVICE_KRAKENRESETPOSE_H

